import asyncio
import datetime
import io
import logging
import re
from datetime import datetime, timedelta
from os import getenv

from aiogram import Bot, Dispatcher, F, types
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.types import BufferedInputFile, Message
from aiogram.utils.markdown import hbold

from redis_handlers import init_redis
from states import UserStates
from gen import generate

# Set up logging
logging.basicConfig(level=logging.INFO)
_LOGGER = logging.getLogger(__name__)

# Initialize the Bot and Dispatcher
TOKEN_API = getenv("TOKEN_API_BOT")
try:
    storage: RedisStorage = init_redis()
except Exception as e:
    _LOGGER.error(f"Redis initialization failed: {e}")
    storage = MemoryStorage()
    _LOGGER.warning("Using MemoryStorage instead of Redis")
dp = Dispatcher(storage=storage)


async def add_points(state: FSMContext) -> None:
    try:
        data = await state.get_data()
        points = data.get("points", 0)
        user_name = data.get("user_name", "Unknown")
        points += 1
        points = min(points, 49)
        points = max(points, 0)
        difficulty = points // 10
        _LOGGER.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} —Å–ø—Ä–∞–≤–∏–ª—Å—è –∏ –ø–æ–ª—É—á–∏–ª {points} –±–∞–ª–ª–æ–≤."
        )
        await state.update_data(difficulty=difficulty, points=points)
    except:
        _LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤")
        await state.update_data(difficulty=0, points=0)


async def subtract_points(state: FSMContext) -> None:
    try:
        data = await state.get_data()
        points = data.get("points", 1)
        user_name = data.get("user_name", "Unknown")
        points -= 1
        points = min(points, 49)
        points = max(points, 0)
        difficulty = points // 10
        _LOGGER.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è –∏ –ø–æ–ª—É—á–∏–ª {points} –±–∞–ª–ª–æ–≤."
        )
        await state.update_data(difficulty=difficulty, points=points)
    except:
        _LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Ç–∞–Ω–∏–∏ –±–∞–ª–ª–æ–≤")
        await state.update_data(difficulty=0, points=0)


async def get_new_task(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    difficulty = data.get("difficulty")
    expression, answer = generate(difficulty)
    await state.update_data(
        expression=expression,
        answer=answer,
        user_name=message.from_user.full_name,
    )
    await message.answer(
        "üîî –í–Ω–∏–º–∞–Ω–∏–µ-–≤–Ω–∏–º–∞–Ω–∏–µ! –ù–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä—á–∏–∫! üîî\n"
        f"<code>{expression}</code>\n"
        "–°–∫–æ—Ä–µ–µ –ø–∏—à–∏ –æ—Ç–≤–µ—Ç! ‚è±Ô∏è"
    )
    await state.set_state(UserStates.await_1_answer)


@dp.message(CommandStart())
async def start_handler(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    difficulty = data.get("difficulty")
    if difficulty is None:
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç–∏–∫, {hbold(message.from_user.full_name)}! üåü\n"
            "–Ø —Ç–≤–æ–π –≤–µ—Å—ë–ª—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ —Ü–∏—Ñ—Ä –∏ –ø—Ä–∏–º–µ—Ä–æ–≤! üöÄ\n\n"
            "–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –ø—Ä–æ—Å—Ç–µ–Ω—å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤, –∞ –µ—Å–ª–∏ —Ç—ã –±—É–¥–µ—à—å —â—ë–ª–∫–∞—Ç—å –∏—Ö –∫–∞–∫ –æ—Ä–µ—à–∫–∏, "
            "—è –ø–æ–¥–∫–∏–Ω—É —Ç–µ–±–µ –∑–∞–¥–∞—á–∫–∏ –ø–æ—Å–ª–æ–∂–Ω–µ–µ! üòâ\n"
            "–ì–æ—Ç–æ–≤ —Å—Ç–∞—Ç—å —Å—É–ø–µ—Ä–∑–≤–µ–∑–¥–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏? üí´"
        )
        await state.update_data(difficulty=0)
        _LOGGER.info(
            f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}, id: {message.from_user.id}"
        )
    else:
        await message.answer(
            f"–°–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π, {hbold(message.from_user.full_name)}! üåà\n"
            f"–°–µ–π—á–∞—Å –º—ã –∏–≥—Ä–∞–µ–º –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {difficulty} ‚ö°Ô∏è"
        )
        _LOGGER.info(
            f"–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫: {message.from_user.full_name}, id: {message.from_user.id}"
        )
    await state.update_data(user_name=message.from_user.full_name)
    await get_new_task(message, state)


@dp.message(UserStates.await_1_answer)
async def answer1_handler(message: Message, state: FSMContext) -> None:
    ans = message.text.replace(" ", "").replace(",", ".").replace("=", "-")
    try:
        ans = float(ans)
        data = await state.get_data()
        right_answer = data.get("answer")
        if ans == right_answer:
            await message.answer(("ü§©"))
            await message.answer(("üéâ –£–†–ê!!! üéâ"))
            await message.answer(
                "–¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å –ü–ï–†–í–û–ô –ø–æ–ø—ã—Ç–∫–∏! üåü\n"
                "–≠—Ç–æ —Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞—è –º–µ–¥–∞–ª—å! üèÜ\n"
                "–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å —á–µ—Ä–µ–∑... —â–∞—Å –ø—Ä–∏–¥—É–º–∞—é! üòÑ"
            )
            _LOGGER.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} —Ä–µ—à–∏–ª –ø—Ä–∏–º–µ—Ä —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏"
            )
            await add_points(state)
            await get_new_task(message, state)
        else:
            await message.answer(
                "–û–π-–æ–π-–æ–π! ü´¢\n"
                "–ö–∞–∂–µ—Ç—Å—è, —Ç—É—Ç –º–∞–ª–µ–Ω—å–∫–∞—è –æ—à–∏–±–∫–∞! üßê\n"
                "–ü—Ä–æ–≤–µ—Ä—å –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–Ω—å–∫–æ –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!\n"
                "–í–æ—Ç –Ω–∞—à –ø—Ä–∏–º–µ—Ä:\n"
                f"<code>{data.get('expression')}</code>\n"
                "–¢—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–∞–≤–∏—à—å—Å—è! üí™"
            )
            await state.set_state(UserStates.await_2_answer)
            _LOGGER.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –æ—à–∏–±—Å—è –ø–µ—Ä–≤—ã–π —Ä–∞–∑"
            )
    except:
        await message.answer(
            "–¶–∏—Ñ–µ—Ä–∫–∏-—Ü–∏—Ñ–µ—Ä–∫–∏! üî¢\n"
            "–î–∞–≤–∞–π —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏! üßÆ\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫! üòä"
        )
        return


@dp.message(UserStates.await_2_answer)
async def answer2_handler(message: Message, state: FSMContext) -> None:
    ans = message.text.replace(" ", "").replace(",", ".").replace("=", "-")
    try:
        ans = float(ans)
        data = await state.get_data()
        reight_answer = data.get("answer")
        if ans == reight_answer:
            await message.answer(
                "üéà –£—Ä–∞! –ü–æ–ª—É—á–∏–ª–æ—Å—å! üéà\n"
                "–°–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏ - —ç—Ç–æ –∫—Ä—É—Ç–æ! üòé\n"
                "–¢–≤–æ—è –Ω–∞–≥—Ä–∞–¥–∞ - —Å–µ—Ä–µ–±—Ä—è–Ω–∞—è –∑–≤—ë–∑–¥–æ—á–∫–∞! ‚≠êÔ∏è"
            )
            _LOGGER.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} —Ä–µ—à–∏–ª –ø—Ä–∏–º–µ—Ä —Å–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏"
            )
            await add_points(state)
            await get_new_task(message, state)
        else:
            await message.answer(
                "–•–º-–º... ü§î\n"
                "–û–ø—è—Ç—å –º–∞–ª–µ–Ω—å–∫–∞—è –ø–æ–º–∞—Ä–∫–∞! üé®\n"
                "–î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ:\n"
                f"<code>{data.get('expression')}</code>\n"
                "–¢—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏! üåà"
            )
            await state.set_state(UserStates.await_3_answer)
    except:
        await message.answer(
            "–í–∏–∂—É –±—É–∫–≤—ã... –∞ –Ω–∞–¥–æ —Ü–∏—Ñ—Ä—ã! üî§‚û°Ô∏èüî¢\n"
            "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ, –∫–∞–∫ –º—ã –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–ª–∏—Å—å! ü§ù"
        )
        return


@dp.message(UserStates.await_3_answer)
async def answer3_handler(message: Message, state: FSMContext) -> None:
    ans = message.text.replace(" ", "").replace(",", ".").replace("=", "-")
    try:
        ans = float(ans)
        data = await state.get_data()
        reight_answer = data.get("answer")
        if ans == reight_answer:
            await message.answer(
                "üéÜ –§–ê–ù–§–ê–†–´! üéá\n"
                "–° —Ç—Ä–µ—Ç—å–µ–π –ø–æ–ø—ã—Ç–∫–∏ - —ç—Ç–æ –ø–æ–±–µ–¥–∞! üèÅ\n"
                "–¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —É–ø–æ—Ä–Ω—ã–π –±–æ–µ—Ü! üí•"
            )
            await add_points(state)
            await get_new_task(message, state)
        else:
            await message.answer(("ü´Ç –ù–µ –≥—Ä—É—Å—Ç–∏!"))
            await message.answer(
                "–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –±—ã–ª —Å–ª–∏—à–∫–æ–º —Ö–∏—Ç—Ä—é—â–∏–º! ü¶ä\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{reight_answer}</b>\n"
                "–î–∞–≤–∞–π –≤–æ–∑—å–º—ë–º –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä - –æ–Ω —Ç–æ—á–Ω–æ –ø–æ –∑—É–±–∞–º! üòâ\n"
                "–£–∂–µ –±–µ–≥—É –∏—Å–∫–∞—Ç—å... üèÉ‚ôÇÔ∏è"
            )
            await subtract_points(state)
            await get_new_task(message, state)
    except:
        await message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –∫—Ç–æ-—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –∑–∞–≥–∞–¥–∫–∏? üé≠\n"
            "–ù–æ –º–Ω–µ –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ —á–∏—Å–ª–æ - –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑! ü§ó"
        )
        return


@dp.message(Command("stop"))
async def stop_handler(message: Message, state: FSMContext) -> None:
    try:
        await state.clear()
    finally:
        await message.answer(
            f"–ü–æ–∫–∞-–ø–æ–∫–∞, {hbold(message.from_user.full_name)}! üëã\n"
            "–Ø –±–µ—Ä–µ–∂–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—é —Ç–≤–æ–∏ —É—Å–ø–µ—Ö–∏... —à—É—á—É, –∑–∞–±—ã–ª –≤—Å—ë! ü§´\n"
            "–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å–∫–æ—Ä–µ–µ, –±—É–¥–µ–º –∏–≥—Ä–∞—Ç—å –µ—â—ë! üéÆ"
        )


@dp.message()
async def echo_handler(message: types.Message) -> None:
    await message.answer(
        "ü§ñ –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã, –¥–∞–≤–∞–π –∏–≥—Ä–∞—Ç—å! üé≤"
    )


async def main() -> None:
    # Initialize Bot instance with a default parse mode which will be passed to all API calls
    bot = Bot(
        TOKEN_API, default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    try:
        # Start polling for updates
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
